charToBinaryDict = { "A":"10111000",
              "B":"111010101000",
              "C":"11101011101000",
              "D":"1110101000",
              "E":"1000",
              "F":"101011101000",
              "G":"111011101000",
              "H":"1010101000",
              "I":"101000",
              "J":"1011101110111000",
              "K":"111010111000",
              "L":"101110101000",
              "M":"1110111000",
              "N":"11101000",
              "O":"11101110111000",
              "P":"10111011101000",
              "Q":"1110111010111000",
              "R":"1011101000",
              "S":"10101000",
              "T":"111000",
              "U":"1010111000",
              "V":"101010111000",
              "W":"101110111000",
              "X":"11101010111000",
              "Y":"1110101110111000",
              "Z":"11101110101000",
              "1":"10111011101110111000",
              "2":"101011101110111000",
              "3":"1010101110111000",
              "4":"10101010111000",
              "5":"101010101000",
              "6":"11101010101000",
              "7":"1110111010101000",
              "8":"111011101110101000",
              "9":"11101110111011101000",
              "0":"1110111011101110111000",
              ",":"1110111010101110111000",
              "?":"101011101110101000",
              "'":"1011101110111011101000",
              "!":"1110101110101110111000",
              "/":"1110101011101000",
              "(":"111010111011101000",
              ")":"1110101110111010111000",
              "&":"10111010101000",
              ":":"11101110111010101000",
              ";":"11101011101011101000",
              "=":"1110101010111000",
              "-":"111010101010111000",
              "_":"10101110111010111000",
              "\"":"101110101011101000",
              "$":"10101011101010111000",
              "@":"10111011101011101000",
	      ".":"1011101011101000",
	      " ":"0000"}
binaryToCharDict = {v:k for(k,v) in charToBinaryDict.items()}


def base36Encode(number, alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    """Converts an integer to a base36 string."""
    if not isinstance(number, (int)):
        raise TypeError('number must be an integer')
    base36 = ''
    sign = ''

    if number < 0:
        sign = '-'
        number = -number

    if 0 <= number < len(alphabet):
        return sign + '0' + alphabet[number]

    while number != 0:
        number, i = divmod(number, len(alphabet))
        base36 = alphabet[i] + base36

    return sign + base36


def base36Decode(number):
    return int(number, 36)
